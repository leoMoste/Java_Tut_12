package _101_Comparing;

import java.util.Arrays;
import java.util.Comparator;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/*	Integer five = 5;
		Integer[] others = {0, 5, 10, -50,50};
		
		
		for(Integer i : others) {
			int val = five.compareTo(i);
			System.out.printf("%d %s %d: compareTo=%d%n", five,
					(val == 0 ? "==" : (val < 0) ? "<" : ">"), i, val);
		}*/
		
		Student tim = new Student("Tim");
		Student[] students = {new Student("Zach"), new Student("Tim"), new Student("Ann")};
		
		// we can not using sort() on any Class 
		// the class has to implement the interface
		// otherwise will get ClassCastException
		Arrays.sort(students); 
		System.out.println(Arrays.toString(students));
		
		//System.out.println("result= " + tim.compareTo(new Student("TIM")) ); // gives 32, it is the diffrence btw any uppercase letter and lowercase letter
		
		
		//Comparator<Student> gpaComparator = new StudentGPACompartor();
		//Arrays.sort(students, gpaComparator.reversed());
		
		System.out.println(Arrays.toString(students));
		
       /*
        * // SAM-Typ als anonyme innere Klasse
			new SAMTypAnonymeKlasse() {
			public void samTypMethode(METHOD-PARAMETERS){
			METHOD-BODY
			}
			}
			// SAM-Typ als Lambda
			(METHOD-PARAMETERS) -> { METHOD-BODY }
			        * 
        * */
		
		Arrays.sort(students, new StudentGPACompartor() {
			@Override
			public int compare(Student o1, Student o2) {
				
				int gpaComparison = Double.compare(o1.gpa, o2.gpa);
				if(gpaComparison == 0)
				{

					return o1.name.compareTo(o2.name);
					
					// Alternatively, you could use:
					// return Comparator.comparing(String::toString).compare(o1.name, o2.name);
				}
		        return gpaComparison;
			}
		});
		
		
	}

}
